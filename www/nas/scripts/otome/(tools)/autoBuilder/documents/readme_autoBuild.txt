ねこまたや清積です

新機能の試験用に自動ビルダ関連のファイルと新機能対応ライブラリをまとめたものをアップロードします。
プロジェクト内でアイテムの移動を行いますので、今回の拡張はAE7以降対応となります。
AE65環境では機能が制限されます（実用価値がなくなります）

お試しになる方は以下の手順でインストールをお願いいたします。

	nas環境のない方

アーカイブを解凍してできた nasフォルダをAEのスクリプトフォルダに配置してください

	すでにnas環境のある方

アーカイブを解凍してできた nasフォルダの内容を現状のフォルダ内容に上書きしてください。
ライブラリの互換性は考慮されています。古いスクリプトで不都合が出ることはないと思われます。
ただ、独自にライブラリの拡張をなさっておられる方はご注意ください。
	
いくつかの関数の引数に変更があります
消滅したモジュールはありません。

	ビルド中のメッセージが独自のコンソールに出力されます。(新機能)

コンソール出力を確認する場合は　dbgConsole.jsx を実行して表示されるメッセージをご確認ください。
エラーメッセージも出力されますので、何か不都合のあった場合はこれを保存して送っていただけると
対応が早いかもしれません。

	スクリプトメニューからnasMenuIIを実行してください
◇(ツールボックス)　> ◇(オートビルド試験) とたどると試験中のコードにアクセスできます。

00-タイムシートビルド/おまかせポン！/ワークフォルダ設定　の三つのボタンから自動ビルドが実行できます。

自動ビルドは以下の手順で実行されます

	フッテージインポート
通常のインポートです。

	フッテージフォルダ作成
フッテージの格納用フォルダアイテムを作成します。フォルダ名の変更は可能ですが特に理由のない限り変更はお勧めしません。
この情報は　nas.ftgFolders オブジェクトに格納されております。

	フッテージ振り分け
先に作成したフォルダ内にフッテージを振り分けます。
セルを格納する_paintフォルダ　背景を格納する_bgフォルダの中のアイテムがビルドの対象になります。
フッテージ誤認があった場合や　手動でインポートしたフッテージはこのフォルダに格納することで処理対象となります。

	シート読み込み
タイムシートを読み込んで、プロジェクト内に保存します。
/[footages]/_etc/[timeSheetBinder] コンポの中にテキストレイヤの形で保存してあります。

	MAP構築
nasシステム上はMAPデータと呼ばれますが、通称では「セルコンポ」と呼んだほうが通りがよいかも知れません。
タイムシートのレイヤ(タイムライン)数と同じ数の素材格納用コンポを作ります。
（この時点ではサイズ固定のカラっぽのコンポです）

	セル・背景の配置
上記のMAP構築と同時にフッテージフォルダからファイル名を手がかりにしてMAPコンポに素材を割りつけます。
寸法はこのときチェックしてコンポのサイズを変更しています。

	自動ビルド
中間素材であるMAPデータはタイムシートと１対１の関係が作られていますので、このコンポをビルドすることで
安定した自動ビルドが可能になります。

	ステージ作成
プログラム内部では、タイムシートをXpsオブジェクトとして扱います。
Xpsオブジェクトは通常 現状ではグローバル変数　XPS　としてアクセスできます。

自動ビルドは XPS.makeStage()メソッドで実行されます。
このメソッドを実行すると、タイムシートの長さで新しいステージ(コンポ)を作成して、MAPコンポをサーチして素材を配置します
配置終了後は、タイムシート適用を１回行なった後ステージ作成時自動処理を実行します。


	タイムシート適用
タイムシートは、CompItemの拡張メソッド　CompItem.applyXps(Xps)メソッドを実行することで行なわれます。
このメソッドは引数で与えたタイムシートを自分自身のレイヤに対して順次適用します。
背景であると思われるレイヤはタイムシートに記述がない場合が多いですが、総判断した場合は、「止め」のタイミングを仮に与えています。

	ステージ作成時自動処理
ステージ作成後に自動処理を行ないます。
この中で　カメラレイヤ作成　カメラコンポ作成　出力用コンポの作成を行なっています。
このあたりは作品によって各種条件が変わりますのでカスタマイズが容易なようにしてあります。

新機能として「自動処理」機能を作りました。
これはバッチ処理に近いもので、CompItem.applyFolder(Folde)メソッドでフォルダを指定して処理を行ないます。

仕組みは単純で「フォルダの内の数字ではじまる名前のスクリプトとアニメーションテンプレートを
その数字順に実行・適用」してゆくというものです。
スクリプトは、コンポアイテムのメソッドの一部として実行しますので、内部ではthisプロパティがコンポ自身を指します。
実行時のディレクトリは、カレントを指定フォルダに変更してありますので、実行に必要な素材の類はフォルダ内に格納して
相対パスでアクセスすることが可能です。

アニメーションテンプレートは、適用時点で選択されているレイヤに対して順次適用されます。
選択されたレイヤがない場合はコンポアイテムのapplyTemplate()をコールするので、新規にソリッドが作成されてそこに適用されます。

特定のレイヤに対してのみ適用する必要がある場合は、あらかじめスクリプトを使って選択状態を操作するか、または数字つきでない
テンプレートを用意してスクリプト内で適用してください。

サンプルのフォルダ　/autoBuilder/resources/ 内に処理見本があります。


動作条件のカスタマイズは、nas/lib/nas_Otome_config.jsx を編集することで変更可能です。
変更が頻繁に必要な内容に関してはGUIを作って設定保存を行なうようにする予定です


以上駆け足ですが、解説でした。

ご意見ご質問等あればメーリングリストやBBSでお問い合わせください

2009/11/16 nekomataya/kiyo

