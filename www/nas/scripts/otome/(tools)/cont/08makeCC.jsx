/*(コンテチップ書き出し)<cells>コンテ撮(ライカリール)出力仮スクリプト 2008 3月暫定版コンテ分解プロジェクトに追加するサブカラム毎のコンポを作成する各サブカラムごとに出力コンポを作るコンポは、	サブカラムサイズ	カラム情報にしたがって出力バッファをコンポに配置	レンダーキューに自動配置*//* 仮コーデイング本コーディングで必要な機能	中断・データ確認・プログレス表示	上書き(現在だと複数作成になってしまう。)*/nas.eStoryBoard.makeCChip=function(cIdx){//	カラムコレクションの全キーを検査して順次処理//カラムID 直指定に			myColumnInfo=this.getColumnInformation(cIdx);//カラム情報取得		//出力用コンポ作成/*	コンテサイズでカメラがカラムコレクションのポジションを参照して初期配置される	純粋に画像の縦横比だけでコンポサイズを作成	縦横比をフレームの縦横と比較>ヨコナガかタテナガか判断	フィットオプションがあれば、タテナガは横幅・ヨコナガは縦幅を基準にサイズだし	それ以外は、標準解像度でスケールしたコンポを作成	コンポにエクスプレッションを記述	OMのせてレンダー登録*///コンテチップのオリジナルサイズ	var ccWidth=this.pictureArea.scale.value[0];	var ccHeight=ccWidth/this.pictureArea.effect("フレーム縦横比").property(1).value;//コンテチップ出力サイズ 9:16 640w	var myWidth=640;//	var myHeight=360;//	if(this.pictureArea.effect("フレーム縦横比").property(1).value>(myColumnInfo.width/myColumnInfo.height))	{		//タテナガ		if(myColumnInfo.scaleOption){			var compWidth=ccWidth;			var compHeight=myColumnInfo.height/(myColumnInfo.width/ccWidth);		}else{			var compWidth=myColumnInfo.width;			var compHeight=myColumnInfo.height;		}	}else{		//ヨコナガ		if(myColumnInfo.scaleOption){			var compWidth=myColumnInfo.width/(myColumnInfo.height/ccHeight);			var compHeight=ccHeight;		}else{			var compWidth=myColumnInfo.width;			var compHeight=myColumnInfo.height;		}	}//計算したサイズを一律出力用比率に変換(ねこら用640Wに変換が目的)	compWidth  =Math.round(compWidth *(myWidth/ccWidth));	compHeight =Math.round(compHeight*(myWidth/ccWidth));//名前を生成 カラムINDEX_PageNo_scID_CutNo_sCIdx	var compNm=nas.Zf(myColumnInfo.pageIndex,3)+"_"+nas.Zf(myColumnInfo.pageColumnIndex,2)+"_"+myColumnInfo.cutNo+"_"+myColumnInfo.subColumnIndex+"_"+nas.Zf(cIdx,3);//undoGroupを3ブロックにわけるか?app.beginUndoGroup(cIdx+" conteChip");	var myCCComp=app.project.items.addComp(compNm,compWidth,compHeight,1,Math.floor(10000/this.frameRate)/10000,this.frameRate);	var myCast=myCCComp.layers.add(this.targetCC);//カラムコレクションをレイヤに登録//キャストレイヤを時間オフセットする//	myCast.startTime=-(cIdx*(1/this.frameRate));	var shiftTime = cIdx*(1/this.frameRate);	myCast.startTime=-shiftTime;//キャストレイヤのエクスプレッションを登録	myCast.property("anchorPoint").expression=decodeURI("thisLayer.source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).position.valueAtTime("+shiftTime+")");	myCast.property("position").expression=decodeURI("thisLayer.source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).anchorPoint");	myCast.property("scale").expression=decodeURI("/*%20%E5%87%BA%E5%8A%9B%E3%83%90%E3%83%83%E3%83%95%E3%82%A1%E3%81%AE%E3%82%B9%E3%82%B1%E3%83%BC%E3%83%AB%E6%B1%BA%E5%AE%9A%E3%82%A8%E3%82%AF%E3%82%B9%E3%83%97%E3%83%AC%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%20%E5%9B%BA%E5%AE%9A%EF%BC%8Bfit%E3%83%A2%E3%83%BC%E3%83%89%E3%81%A4%E3%81%8D*/%0A//72dpi%20%E5%AE%89%E5%85%A8%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E5%B9%85%E3%80%80(225mm*0.9/25.40)*72%20%3E%20574.0157px%0A%09mySafeFrameWidth=thisComp.width;%0A//72dpi%20%E5%AE%89%E5%85%A8%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E9%AB%98%E3%80%80(225mm*(3/4)*0.9/25.40)*72%20%3E%20430.5188px%0A%09mySafeFrameHeight=thisComp.height;%0A%0Aif(this.source.layer(%22ColumnInformation%22).effect(%22ScaleFitting%22)(%22%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%83%9C%E3%83%83%E3%82%AF%E3%82%B9%22)==true)%7B%0Avar%20baseAspect=%09this.source.layer(%2201%E7%94%A8%E7%B4%99%E7%99%BB%E9%8C%B2%22).source.layer(%22%E7%94%BB%E5%83%8F%E3%82%A8%E3%83%AA%E3%82%A2%22).effect(%22%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E7%B8%A6%E6%A8%AA%E6%AF%94%22)(1).value;%0Avar%20myAspect=%09thisComp.layer(%2203%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%22).source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B0%5D/thisComp.layer(%2203%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%22).source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B1%5D;%0Avar%20fitScale=(myAspect%3C=baseAspect)?%0A%09100*mySafeFrameWidth/thisComp.layer(%2203%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%22).source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B0%5D:%0A%09100*mySafeFrameHeight/thisComp.layer(%2203%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%B3%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%22).source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B1%5D;%0Avar%20fixScale=fitScale;%0A%7Delse%7B%0Avar%20fixScale=100*mySafeFrameWidth/this.source.layer(%22ColumnInformation%22).effect(%22PageWidth%22)(1).value;%0A//%5B100*(574.0157)/this.source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B0%5D,100*(430.5188)/this.source.layer(%22%E3%82%AB%E3%83%A9%E3%83%A0%E3%82%BB%E3%83%AC%E3%82%AF%E3%82%BF%22).scale%5B1%5D%5D;%0A%7D;%0A%5BfixScale,fixScale%5D;%0A")//ワークエリアを第一フレームに設定する		//出力コンポ用のOM / RQ登録	var lrRQtemplate="最良設定";//	var lrOMtemplate="Photoshop";//? "Png-CELL"	var lrOMtemplate="PNG_noAlpha"		myRQ=app.project.renderQueue.items.add(myCCComp);		myRQ.applyTemplate(lrRQtemplate);		myRQ.outputModule(1).applyTemplate(lrOMtemplate);app.endUndoGroup();return myCCComp.name;//サブカラムチップを設定したコンポ名を返す};//上のコンポ作成を順次呼び出して全カット出力用のコンポを作成nas.eStoryBoard.makeAllCC=function(){//	var mySaveFolder=new Folder(Folder.current.path);//	mySaveFolder=Folder.selectDialog("レンダリング先フォルダを指定してください",mySaveFolder);	for (var idx=0;idx<this.columnPosition.numKeys;idx++){			clearOutput();			writeLn(this.makeCChip(idx));		};	};//Actionnas.eStoryBoard.makeAllCC();